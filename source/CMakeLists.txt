CMAKE_MINIMUM_REQUIRED ( VERSION 3.12 )
project( drgb VERSION 0.1.0 )

include(CTest)
enable_testing()

SET ( CMAKE_VERBOSE_MAKEFILE false )

SET ( SYSTEM_SERVICE_NAME systemd)

SET ( CONFIG_FILENAME ${PROJECT_NAME}.conf )
SET ( CONFIG_DIR "/etc/${PROJECT_NAME}")
SET ( SERVICE_FILENAME ${PROJECT_NAME}-${SYSTEM_SERVICE_NAME}.sh )
SET ( SERVICE_DIR "/etc/init.d")
SET ( SYSLOGCONF_FILENAME ${PROJECT_NAME}-syslog-ng.conf )
SET ( SYSLOGCONF_DIR /etc/syslog-ng/conf.d/ )

SET ( OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/build )
SET ( INSTALL_DIR /usr/local/${PROJECT_NAME}/ )	#실제 실행파일이 존재하는 디렉토리.

#Debug모드일 때, __DEBUG__ 매크로 등록
SET ( DEBUG_MACRO "-D__DEBUG__ -DCONFIG_PATH=\\\"../resources/${CONFIG_FILENAME}\\\"" )
SET ( CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${DEBUG_MACRO}" )
SET ( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${DEBUG_MACRO}" )
#Release모드일 때, config path를 절대경로로 등록.
SET ( RELEASE_MACRO "-DCONFIG_PATH=\\\"${CONFIG_DIR}/${CONFIG_FILENAME}\\\"" )
SET ( CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${RELEASE_MACRO}")
SET ( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${RELEASE_MACRO}")

ADD_COMPILE_OPTIONS ( -std=c++17 )

IF( NOT BUILD_TARGET )
	SET ( BUILD_TARGET auth match battle)
ENDIF()

SET ( DIRS
	utils
	threads
	postgres
	network
	templates

	${BUILD_TARGET}
)

INCLUDE_DIRECTORIES ( ${DIRS} )
FOREACH ( DIR IN LISTS DIRS )
	ADD_SUBDIRECTORY( ${DIR} )
ENDFOREACH()


#Build Result 저장 경로 설정
SET_TARGET_PROPERTIES ( 
	${BUILD_TARGET}
	PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR}
	ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR}
)

#INSTALL 타겟 경로 설정
INSTALL ( TARGETS ${BUILD_TARGET}
	RUNTIME DESTINATION ${INSTALL_DIR}
	LIBRARY DESTINATION ${INSTALL_DIR}
)

#리소스 별 설치폴더 지정.
INSTALL ( FILES resources/${SYSLOGCONF_FILENAME} DESTINATION ${SYSLOGCONF_DIR} )
INSTALL ( FILES resources/${CONFIG_FILENAME} DESTINATION ${CONFIG_DIR} )
FOREACH ( TARGET IN LISTS BUILD_TARGET )
	INSTALL ( 
		FILES resources/${SERVICE_FILENAME} 
		RENAME ${PROJECT_NAME}-${TARGET}
		PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_WRITE GROUP_READ GROUP_EXECUTE WORLD_WRITE WORLD_READ WORLD_EXECUTE
		DESTINATION ${SERVICE_DIR} 
	)
ENDFOREACH()

SET ( CPACK_PROJECT_NAME ${PROJECT_NAME} )
SET ( CPACK_PROJECT_VERSION ${PROJECT_VERSION} )
include(CPack)