version: '3.0'

name: "drgb-server"
services:
  web:
    container_name: ClientWeb
    build:
      context: .
      dockerfile: Dockerfile-web
    image: drgb-clientweb
    ports:
      #TODO : 사용자들이 접속 할 포트로 변경 필요.(http : 80, httpd : 443)
      - 54321:80
    volumes:
      - ./ClientBuild:/usr/local/apache2/htdocs
  auth:
    container_name: auth
    depends_on: #DB가 먼저 올라오고 나서 실행되어야 함.
      - db
      - session
    image: drgb-auth
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        TARGET: "auth"
    tty: true
    stdin_open: true
    privileged: true
    ports:
      - "52432:52431" #server-server port include mgr
      - "54322:54322" #client port
    cpus: 1         #no effect on wsl2
    mem_limit: 512m #no effect on wsl2
  match:
    container_name: match
    image: drgb-match
    depends_on:
      - db
      - session
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        TARGET: "match"
    tty: true
    stdin_open: true
    privileged: true
    ports:
      - "52433:52431" #server-server port include mgr
      - "54323:54323" #client port
    cpus: 1         #no effect on wsl2
    mem_limit: 512m #no effect on wsl2
  battle1:
    container_name: battle1
    image: drgb-battle
    depends_on:
      - db
      - session
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        TARGET: "battle"
        MACHINE_ID: 1
    tty: true
    stdin_open: true
    privileged: true
    ports:
      - "52434:52431" #server-server port include mgr
      - "54324:54324" #client port
    cpus: 1         #no effect on wsl2
    mem_limit: 512m #no effect on wsl2
  db:
    container_name: db
    image: postgres
    environment:
      - POSTGRES_USER=drgb_user
      - POSTGRES_DB=drgb_db
      - POSTGRES_PASSWORD=drgbpassword
      - TZ=Asia/Seoul
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      #- ./Data:/var/lib/postgresql/data  #linux 환경 docker에서는 마운트할 경우, 해당 디렉토리의 접근권한이 컨테이너 내 마운트폴더의 설정을 따라가므로, docker 디렉토리 외 다른 곳의 디렉토리로 설정해야 서비스 올릴 때 에러가 발생하지 않음.
    #ports:
    #  - "5432:5432"
  session:
    container_name: session
    image: redis
    #ports:
    #  - "6379:6379"